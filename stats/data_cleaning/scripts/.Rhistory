AcademicPS_Psych_F1_
three.way <- aov(`Math Score` ~ Gender + Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
three.way <- aov(`Math Score` ~ Gender + Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
two.way <- aov(`Math Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
View(three.way)
summary(three.way)
summary(two.way)
summary(three.way)
interaction <- aov(`Math Score` ~ Gender*Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
View(interaction)
summary(interaction)
summary(three.way)
plot(three.way)
plot(three.way)
plot(three.way)
plot(three.way)
tukey.plot.aov <- aov(`Math Score` ~ Gender*Race +`Condition Assignment`, data = AcademicPS_Psych_F1)
tukey.plot.aov <- aov(`Math Score` ~ Gender + Race +`Condition Assignment`, data = AcademicPS_Psych_F1)
tukey.plot.aov <- aov(`Math Score` ~ Gender:Race:`Condition Assignment`, data=AcademicPS_Psych_F1)
plot(three.way)
three.way.plot
tukey.plot.aov <- aov('Math Score'~ Gender:Race:'Condition Assignment', data = AcademicPS_Psych_F1_)
tukey.plot.aov <- aov('Math Score'~ Gender:Race:'Condition Assignment', data=AcademicPS_Psych_F1_)
bxp <- ggboxplot()
two.way <- aov(`Math Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
View(two.way)
table(two.way)
summary(two.way)
interaction <- aov(`Math Score` ~ Gender + Race + Gender*Race + Gender:'Condition Assignment'+`Race:'Condition Assignment' + Condition Assignment` + Gender:Race:'Condition Assignment', data = AcademicPS_Psych_F1_)
interaction <- aov(`Math Score` ~ Gender*Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
interaction <- aov(`Math Score` ~ Gender + Race + Gender*Race +`Condition Assignment` + Gender*'Condition Assigment' + Race*'Condition Assigment' + Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
interaction <- aov(`Math Score` ~ Gender*`Condition Assignment`, data = AcademicPS_Psych_F1_)
View(interaction)
summary(interaction)
TukeyHSD(three.way)
View(three.way)
summary(three.way)
two.way <- aov(`Math Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Math Score` ~ Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Gender Stereotype Threat SR Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Gender Stereotype Threat SR Score` ~ Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Race Stereotype Threat SR Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Race Stereotype Threat SR Score` ~ Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
model <- aov('Math Score' ~ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
model <- aov(`Math` ~ Race*Gender*`Condition Assignment`, data = AcademicPS_Psych_F1_)
model <- aov(`Math` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
results <-aov(`Math Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(results)
anova(results)%>% kbl %>% kable_material_dark()
anova(results)
results <-aov(`Gender Stereotype Threat SR Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
anova(results)
results <-aov(`Math Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
warnings()
View(results)
View(results)
MathANOVA <-aov(`Math Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
View(MathANOVA)
summary(MathANOVA)
MathANOVA <-aov(`Math Score` ~ Race + Gender + `Condition Assignment`+ Race:Gender + Race:'Condition Assignment' + Gender:'Condition Assignment'+ Gender:Race:'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOVA <-aov(`Math Score` ~ Race + Gender + `Condition Assignment`+ Race:Gender + Race*'Condition Assignment' + Gender*'Condition Assignment'+ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOVA <-aov(`Math Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
Summary(MathANOVA)
summary.aov(MathANOVA)
MathANOVA1 <- aov('Math Score' ~ Race * Gender * 'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOV <- anova_test('Math Score' ~ Gender*Race*'Condition Assignment', data=AcademicPS_Psych_F1)
MathANOV <- aov('Math Score' ~ Gender*Race*'Condition Assignment', data=AcademicPS_Psych_F1)
MathANOV <-aov('Math Score' ~ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
## Install and load packages
if (!require(car)) {install.packages("car"); require(car)}
if (!require(pwr)) {install.packages("pwr"); require(pwr)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(corrplot)) {install.packages("corrplot"); require(corrplot)}
if (!require(lm.beta)) {install.packages("lm.beta"); require(lm.beta)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(effects)) {install.packages("effects"); require(effects)}
## load data into R
all.data <- read.csv("alldata.kidlearning1.csv") ## all.data is what we are calling it
all.data<-read_xlsx(AcademicPS_Psych_F1_)
all.data <- read_xlsx('AcademicPS_Psych_F1_')
all.data <- read_xlsx("AcademicPS_Psych_F1_")
anova.aov <- lm('Math Score' ~ Race*Gender*'Condition Assignment', data=AcademicPS_Psych_F1_)
anova.aov <- lm('Math Score' ~ Race*Gender*'Condition Assignment',data = AcademicPS_Psych_F1_)
anova.aov <- lm(Math Score ~ Race*Gender*Condition Assignment,data = AcademicPS_Psych_F1_)
anova.aov <- lm('Math Score' ~ Race*Gender*Condition Assignment,data = AcademicPS_Psych_F1_)
anova.aov <- aov(Math Score ~ Race*Gender*'Condition Assignment',data = AcademicPS_Psych_F1_)
anova.aov<-aov(Math Score ~ Race*Gender*'Condition Assignment',data = AcademicPS_Psych_F1_)
str(AcademicPS_Psych_F1_)
ggplot(AcademicPS_Psych_F1_,x='Condition Assignment', y='Math Score', color='gender',palette('red','black'),facet.by='race')
ggplot2:(AcademicPS_Psych_F1_,x='Condition Assignment', y='Math Score', color='gender',palette('red','black'),facet.by='race')
ggboxplot (AcademicPS_Psych_F1_, x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender")
ggplot2:(AcademicPS_Psych_F1_, x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender")
(AcademicPS_Psych_F1_ x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender")
ggplot2: AcademicPS_Psych_F1_, x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender"
ggplot2: AcademicPS_Psych_F1_ x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender"
model <- aov(Math Score ~ Race * Gender * Condition Assignment, data= AcademicPS_Psych_F1_)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
Summary(AcademicPS_Psych_F1_$`Math Score`)
summary(AcademicPS_Psych_F1_$`Math Score`)
summary(AcademicPS_Psych_F1_$Race)
summary(AcademicPS_Psych_F1_$`Condition Assignment`)
summary(AcademicPS_Psych_F1_$Gender)
MathANOVA <- aov('Math Score' ~ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOVA <- aov('Math Score' ~ Gender*Race*'Condition Assignment', data = 'AcademicPS_Psych_F1_')
MathANOVA = aov('Math Score' ~ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOVA <- aov('Math Score' ~ Gender + Race + 'Condition Assignment', data = AcademicPS_Psych_F1_)
two.way <- aov('Math Score' ~ Gender, data=AcademicPS_Psych_F1_)
two.way <- aov(Math Score ~ Gender, data=AcademicPS_Psych_F1_)
two.way<-aov(Math Score ~ Gender, data=AcademicPS_Psych_F1_)
two <- aov(Math Score ~ Gender, data=AcademicPS_Psych_F1_)
two <_ aov(Math Score ~ Gender, data=AcademicPS_Psych_F1_)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
library(readxl)
all_data <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(all_data)
anova.ms <- aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
anova.ms <- aov (Math Score ~ Gender*Race*Condition Assignment, data = all_data)
anova.ms <- lm(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
anova.ms <- aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
ams <- aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
ams<-aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
ams<-aov('Math Score' ~ Gender*Race*Condition Assignment, data = all_data)
ams<-aov(Math Score ~ Gender*Race*'Condition Assignment', data = all_data)
ams<-aov('Math Score' ~ Gender*Race*'Condition Assignment', data = all_data)
ams<-aov('Math Score' ~ Gender*Race*'Condition Assignment', data = all_data)
interaction <- aov(`Math Score` ~ Gender + Race + Gender*Race + Gender:'Condition Assignment'+`Race:'Condition Assignment' + Condition Assignment` + Gender:Race:'Condition Assignment', data = AcademicPS_Psych_F1_)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
library(readxl)
PFD <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(PFD)
msanova <- aov('Math Score' ~ Gender*Race*Condition Assignment, data = PFD)
msanova <- aov(`Gender Stereotype Threat SR Score` ~ Gender +`Condition Assignment`, data = PFD)
summary(msanova)
msanova <- aov(`Math Score` ~ Gender*`Condition Assignment`*Race, data = PFD)
summary(msanova)
rsanova<- aov(`Gender Stereotype Threat SR Score` ~ Gender*`Condition Assignment`*Race, data = PFD)
summary(rsanova)
gsanova<- aov(`Racial Stereotype Threat SR Score` ~ Gender*`Condition Assignment`*Race, data = PFD)
gsanova<- aov(`Race Stereotype Threat SR Score` ~ Gender*`Condition Assignment`*Race, data = PFD)
summary(gsanova)
rginteraction<- aov(`Math Score` ~ Gender*Race, data = PFD)
summary(rginteraction)
TukeyHSD(rginteraction)
rsanova<- aov(`Gender Stereotype Threat SR Score` ~ Gender*, data = PFD)
gmaineffect<- aov(`Gender Stereotype Threat SR Score` ~ Gender, data = PFD)
summary(gmaineffect)
TukeyHSD(gmaineffect)
rmaineffect<- aov(`Race Stereotype Threat SR Score` ~ Race, data = PFD)
summary(rmaineffect)
TukeyHSD(rmaineffect)
summary(PFD)
summary(PFD)
## Using pacman() and p_load()
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
## Read in data file to a data frame called iat_test
iat_test <- read.csv("~/Desktop/psy1903/stats/data_cleaning/data/my-iat-test-data.csv")
## Extract questionnaire data
json_data <- iat_test[iat_test$trialType == "Questionaire","response"]
## Extract questionnaire data
json_data <- iat_test[iat_test$trialType == "Questionaire","response"]
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
## Start by setting your working directory to your psy1903 folder. Replace "~/Desktop/" with the correct path to your psy1903 directory:
setwd("~/Desktop/psy1903/")
## Set your working directory to be "your_path/psy1903/stats/data_cleaning/scripts/"
setwd("~/Desktop/psy1903/stats/data_cleaning/scripts")
## Using pacman() and p_load()
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
## Read in data file to a data frame called iat_test
iat_test <- read.csv("~/Desktop/psy1903/stats/data_cleaning/data/my-iat-test-data.csv")
## Extract questionnaire data
json_data <- iat_test[iat_test$trialType == "Questionaire","response"]
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
## Extract questionnaire data
json_data <- iat_test[iat_test$trialType == "Questionaire","response"]
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
## Using pacman() and p_load()
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
## Read in one's participant's .csv dile as a data frame --
iat_data1 <- read.csv("~/Desktop/psy1903/osfstorage-archive/iat-2024-11-12-00-19-48.csv", header = TRUE)
## Examine your data frame
str(iat_data1)
summary(iat_data1)
#### Subsetting Data ----------
iat_data2 <- iat_data1[iat_data1$expectedCategoryAsDisplayed == "healthy or fit" |
iat_data1$expectedCategoryAsDisplayed == "healthy or fat" |
iat_data1$expectedCategoryAsDisplayed == "unhealthy or fit" |
iat_data1$expectedCategoryAsDisplayed == "unhealthy or fat",
c("trial_index", "rt", "response", "word", "expectedCategory", "expectedCategoryAsDisplayed", "leftCategory", "rightCategory", "correct") ]
## Using the str() and summary() functions, check the structure of your subsetted data files.
str(iat_data2)
summary(iat_data2)
## Convert to integer or factor as necessary
iat_data2$expectedCategory <- as.factor(iat_data2$expectedCategory)
iat_data2$expectedCategoryAsDisplayed <- as.factor(iat_data2$expectedCategoryAsDisplayed)
iat_data2$leftCategory <- as.factor(iat_data2$leftCategory)
iat_data2$rightCategory <- as.factor(iat_data2$rightCategory)
## Creating a loop to convert to integers or factors as necessary
column_names <- c("expectedCategory", "expectedCategoryAsDisplayed", "leftCategory", "rightCategory")
for (column_name in column_names) {
iat_data2[,column_name] <- as.factor(iat_data2[,column_name])
} #can handle variables, where $ cannot
## Rechecking the str() and summary()
str(iat_data2)
summary(iat_data2)
# Step 0: Set a Function
calculate_IAT_dscore <- function(data) {
# Step 1: Only select trials with rt > 300 and < 5000
tmp <- data[data$rt > 300 & data$rt < 5000,]
# Step 2: Separate congruent and incongruent trials (subset tmp into two new data frames: congruent_trials and incongruent_trials)
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "healthy or fit" |
tmp$expectedCategoryAsDisplayed == "unhealthy or fat",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "unhealthy or fit" |
tmp$expectedCategoryAsDisplayed == "healthy or fat",]
# Step 3: Calculate means and standard deviations for congruent and incongruent trials
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_means <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
# Step 4: Calculate D-Score
# 𝑑 = (mean reaction time of congruent − mean reaction time of incongruent) / pooled standard deviation
dscore <- (congruent_means - incongruent_means)/pooled_sd
return(dscore)
#-0.99 - participant responded more quickly to the incongruent block, more biased against
}
calculate_IAT_dscore()
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only* contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
## Rename the default column names to something meaningful
## IAT
colnames(dScores) <- c("participant_ID", "d_score")
## Initiate variable i to represent row numbers for each iteration, starting with 1
i = 1
# Temp file for testing, remove later
file <-files_list[[1]]
for (file in files_list) {
# Step 2:Use read.csv to read in your file
tmp <- read.csv(file)
# Step 3: Assign participant ID as the basename of the file
participant_ID <- tools::file_path_sans_ext(basename(file))
# Step 4: Isolate the participant_ID column for the current row number (i) and assign it to be the current participant_ID variable
dScores[i,"participant_ID"] <- participant_ID
# Step 5: Using similar logic, isolate the d_score OR c("emotionA_d_score", "emotionB_d_score") column(s) for the current row number (i) and assign it to be the current d-score(s) by using our calculate_IAT_dscore or calculate_EST_dscore on the tmp data file
dScores[i,"d_score"] <- calculate_IAT_dscore(tmp)
# Step 6: Remove the temporary data file tmp
rm(tmp)
#Step 7: # Increase our row number variable i by one for the next iteration
i <- i + 1
}
## Outside of the for loop, save the new dScores data frame using write.csv() into your data_cleaning/data subdirectory:
write.csv(dScores,"~/Desktop/psy1903/stats/data_cleaning/data/participant_dScores.csv", row.names = FALSE)
## Read in data file to a data frame called iat_test
iat_test <- read.csv("~/Desktop/psy1903/stats/data_cleaning/data/my-iat-test-data.csv")
## Extract questionnaire data
json_data <- iat_test[iat_test$trialType == "Questionaire","response"]
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
## Extract questionnaire data
json_data <- iat_test[iat_test$trialType == "Questionnaire","response"]
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
str(questionnaire)
questionnaire <- as.data.frame(questionnaire)
## Convert to numeric
questionnaire <- as.data.frame(lapply(questionnaire, as.numeric))
questionnaire2 <- questionnaire
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_real <- fromJSON(questionnaire_data)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_data, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
}
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
view(questionnaire_real)
view(questionnaire_data)
view(questionnaire_data2)
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_real <- fromJSON(questionnaire_data)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_data, as.numeric))
questionnaire_data2 <- questionnaire_data
questionnaire_data[,reverse_item] <- 5 - questionnaire[,reverse_items]
for(reverse_item of reverse_items){
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_real <- fromJSON(questionnaire_data)
str(questionnaire_real)
questionnaire_real <- as.data.frame(questionnaire_real)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_data, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item of reverse_items){
for(reverse_item in reverse_items){
questionnaire_data[,reverse_item] <- 5 - questionnaire[,reverse_items]
}
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_data, as.numeric))
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_real <- fromJSON(questionnaire_data)
str(questionnaire_real)
questionnaire_real <- as.data.frame(questionnaire_real)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_real, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item in reverse_items){
questionnaire_real[,reverse_item] <- 5 - questionnaire_real[,reverse_items]
}
questionnaire_real[,reverse_item] <- 5 - questionnaire_real[,reverse_items]
summary(questionnaire_real)
view(questionnaire_real)
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
source("~/Desktop/psy1903/stats/data_cleaning/scripts/dataCleaningExercise.R")
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_real <- fromJSON(questionnaire_data)
str(questionnaire_real)
questionnaire_real <- as.data.frame(questionnaire_real)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_real, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item in reverse_items){
questionnaire_real[,reverse_item] <- 5 - questionnaire_real[,reverse_items]
}
for(reverse_item in reverse_items){
questionnaire_real[,reverse_item] <- 5 - questionnaire_real[,reverse_items]
}view(questionnaire_real)
view(questionnaire_real)
str(questionnaire_real)
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_official <- fromJSON(questionnaire_data)
str(questionnaire_official)
questionnaire_official <- as.data.frame(questionnaire_official)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_real, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item in reverse_items){
questionnaire_official[,reverse_item] <- 5 - questionnaire_official[,reverse_items]
view(questionnaire_official)
head(questionnaire_official)
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_official <- fromJSON(questionnaire_data)
str(questionnaire_official)
questionnaire_official <- as.data.frame(questionnaire_official)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_real, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item in reverse_items){
questionnaire_official[,reverse_item] <- 5 - questionnaire_official[,reverse_items]
}
}
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_official <- fromJSON(questionnaire_data)
str(questionnaire_official)
questionnaire_official <- as.data.frame(questionnaire_official)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_real, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item in reverse_items){
questionnaire_official[,reverse_item] <- 5 - questionnaire_official[,reverse_items]
}
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_official <- fromJSON(questionnaire_data)
str(questionnaire_official)
questionnaire_official <- as.data.frame(questionnaire_official)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_real, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item in reverse_items){
questionnaire_official[,reverse_item] <- 5 - questionnaire_official[,reverse_items]
}
}
view(questionnaire_official)
View(questionnaire_official)
View(questionnaire_official)
## Calculate & return questionnaire score (mean)
scores_official <- rowMeans(questionnaire_real, na.rm = TRUE)
score_questionnaire()
## Read in data file to a data frame called data
data <- read.csv("~/Desktop/psy1903/osfstorage-archive/")
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_official <- fromJSON(questionnaire_data)
str(questionnaire_official)
questionnaire_official <- as.data.frame(questionnaire_official)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_real, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item in reverse_items){
questionnaire_official[,reverse_item] <- 5 - questionnaire_official[,reverse_items]
}
## Calculate & return questionnaire score (mean)
scores_official <- rowMeans(questionnaire_real, na.rm = TRUE)
}
str(questionnaire_official)
questionnaire_official <- as.data.frame(questionnaire_official)
View(questionnaire_official)
print(questionnaire_official)
head(dScores)
questionnaire_data2 <- questionnaire_data
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only* contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Initiate function called score_questionnaire that accepts a single argument called `data`. Within this function...
score_questionnaire <- function(data) {
## Extract questionnaire data cell
questionnaire_data <- data[data$trialType == "Questionnaire","response"]
## Use fromJSON to convert from JSON to data frame
questionnaire_official <- fromJSON(questionnaire_data)
str(questionnaire_official)
questionnaire_official <- as.data.frame(questionnaire_official)
## Convert to numeric
questionnaire_data <- as.data.frame(lapply(questionnaire_real, as.numeric))
questionnaire_data2 <- questionnaire_data
## Reverse score if necessary
reverse_items <- c("question1","question5","question6","question10")
for(reverse_item in reverse_items){
questionnaire_official[,reverse_item] <- 5 - questionnaire_official[,reverse_items]
}
## Calculate & return questionnaire score (mean)
scores_official <- rowMeans(questionnaire_real, na.rm = TRUE)
}
