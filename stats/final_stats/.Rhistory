if (!require(car)) {install.packages("car"); require(car)}
if (!require(pwr)) {install.packages("pwr"); require(pwr)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(corrplot)) {install.packages("corrplot"); require(corrplot)}
if (!require(lm.beta)) {install.packages("lm.beta"); require(lm.beta)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(effects)) {install.packages("effects"); require(effects)}
## load data into R
all.data <- read.csv("alldata.kidlearning1.csv") ## all.data is what we are calling it
str(AcademicPS_Psych)
AcademicPS_Psych$`Academic+Performance+Study+-+PSY+1901_November+28,+2022_10.33`<- NULL
View(AcademicPS_Psych)
library(readxl)
AcademicPS_Psych <- read_excel("Downloads/untitled folder/AcademicPS-Psych.xlsx")
View(AcademicPS_Psych)
library(readxl)
AcademicPS_Psych <- read_excel("Downloads/untitled folder/AcademicPS-Psych.xlsx")
View(AcademicPS_Psych)
## Install and load packages
if (!require(car)) {install.packages("car"); require(car)}
if (!require(pwr)) {install.packages("pwr"); require(pwr)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(corrplot)) {install.packages("corrplot"); require(corrplot)}
if (!require(lm.beta)) {install.packages("lm.beta"); require(lm.beta)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(effects)) {install.packages("effects"); require(effects)}
## load data into R
all.data <- read.csv("alldata.kidlearning1.csv") ## all.data is what we are calling it
head(AcademicPS_Psych)
class(AcademicPS_Psych)
class(AcademicPS_Psych$Race)
str(AcademicPS_Psych$Race)
table(AcademicPS_Psych$Race)
table(AcademicPS_Psych$`Condition Assignment`)
mean(AcademicPS_Psych$`Math Score`)
## (2) Power analyses ----
# Example "observed"/post hoc power calculation for correlation. Effect size r = small (.20), N = number of ppts (280)
?pwr.r.test # from pwr package
pwr.r.test(n = dim(all.data)[1], r = .2, sig.level = .05) ## dim(all.data)[1] is simply the number of participants
pwr.r.test(n = dim(AcademicPS_Psych)[1], r = .2, sig.level = .05)
table(AcademicPS_Psych$`Condition Assignment`)
table(AcademicPS_Psych$`Condition Assignment`)
mean(AcademicPS_Psych$`Condition Assignment`)
mean(AcademicPS_Psych$`Gender Stereotype Threat SR Score`)
mean(AcademicPS_Psych$`Race Stereotype Threat SR Score`)
sd(AcademicPS_Psych$`Gender Stereotype Threat SR Score`)
t.test(mathscore ~ conditionassignment, data=AcademicPS_Psych)
t.test(mathscore ~ conditionassignment, data=AcademicPS_Psych)
table(AcademicPS_Psych$`Math Score`)
table(AcademicPS_Psych$`Gender Stereotype Threat SR Score`)
table(AcademicPS_Psych$`Race Stereotype Threat SR Score`)
table(AcademicPS_Psych$`Condition Assignment`)
t.test(mathscore ~ conditionassignment, data=AcademicPS_Psych)
sd(AcademicPS_Psych$`Race Stereotype Threat SR Score`)
View(AcademicPS_Psych)
library(ggplot2)
library(ggplot2)
library(ggpubr)
summary(AcademicPS_Psych)
class(AcademicPS_Psych$Race)
str(AcademicPS_Psych$Race)
AcademicPS_Psych$Race <- as.factor(all.data$race)
AcademicPS_Psych$Race <- as.factor(AcademicPS_Psych$race)
View(AcademicPS_Psych)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
## Install and load packages
if (!require(car)) {install.packages("car"); require(car)}
if (!require(pwr)) {install.packages("pwr"); require(pwr)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(corrplot)) {install.packages("corrplot"); require(corrplot)}
if (!require(lm.beta)) {install.packages("lm.beta"); require(lm.beta)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(effects)) {install.packages("effects"); require(effects)}
## load data into R
all.data <- read.csv("alldata.kidlearning1.csv") ## all.data is what we are calling it
str.(AcademicPS_Psych_F1_)
str(AcademicPS_Psych_F1_)
class(AcademicPS_Psych_F1_)
class(AcademicPS_Psych_F1_$race)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
class(AcademicPS_Psych_F1_)
data.frame(AcademicPS_Psych_F1_)
summary(AcademicPS_Psych_F1_)
plot(AcademicPS_Psych_F1_)
table(AcademicPS_Psych_F1_)
table(summary(AcademicPS_Psych_F1_))
table(AcademicPS_Psych_F1_$race)
table(AcademicPS_Psych_F1_$Race)
table(AcademicPS_Psych_F1_$Gender)
table(AcademicPS_Psych_F1_$`Condition Assignment`)
two.way<_ aov('Condition Assignment' ~ Race + Gender, data = AcademicPS_Psych_F1_)
three.way<- aov('Condition Assignment' ~ Race + Gender, data = AcademicPS_Psych_F1_)
three.way <- aov(Math Score ~ Race + Gender, data = AcademicPS_Psych_F1_)
three.way <- aov()
AcademicPS_Psych_F1_
three.way <- aov(`Math Score` ~ Gender + Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
three.way <- aov(`Math Score` ~ Gender + Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
two.way <- aov(`Math Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
View(three.way)
summary(three.way)
summary(two.way)
summary(three.way)
interaction <- aov(`Math Score` ~ Gender*Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
View(interaction)
summary(interaction)
summary(three.way)
plot(three.way)
plot(three.way)
plot(three.way)
plot(three.way)
tukey.plot.aov <- aov(`Math Score` ~ Gender*Race +`Condition Assignment`, data = AcademicPS_Psych_F1)
tukey.plot.aov <- aov(`Math Score` ~ Gender + Race +`Condition Assignment`, data = AcademicPS_Psych_F1)
tukey.plot.aov <- aov(`Math Score` ~ Gender:Race:`Condition Assignment`, data=AcademicPS_Psych_F1)
plot(three.way)
three.way.plot
tukey.plot.aov <- aov('Math Score'~ Gender:Race:'Condition Assignment', data = AcademicPS_Psych_F1_)
tukey.plot.aov <- aov('Math Score'~ Gender:Race:'Condition Assignment', data=AcademicPS_Psych_F1_)
bxp <- ggboxplot()
two.way <- aov(`Math Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
View(two.way)
table(two.way)
summary(two.way)
interaction <- aov(`Math Score` ~ Gender + Race + Gender*Race + Gender:'Condition Assignment'+`Race:'Condition Assignment' + Condition Assignment` + Gender:Race:'Condition Assignment', data = AcademicPS_Psych_F1_)
interaction <- aov(`Math Score` ~ Gender*Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
interaction <- aov(`Math Score` ~ Gender + Race + Gender*Race +`Condition Assignment` + Gender*'Condition Assigment' + Race*'Condition Assigment' + Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
interaction <- aov(`Math Score` ~ Gender*`Condition Assignment`, data = AcademicPS_Psych_F1_)
View(interaction)
summary(interaction)
TukeyHSD(three.way)
View(three.way)
summary(three.way)
two.way <- aov(`Math Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Math Score` ~ Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Gender Stereotype Threat SR Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Gender Stereotype Threat SR Score` ~ Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Race Stereotype Threat SR Score` ~ Gender +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
two.way <- aov(`Race Stereotype Threat SR Score` ~ Race +`Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(two.way)
model <- aov('Math Score' ~ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
model <- aov(`Math` ~ Race*Gender*`Condition Assignment`, data = AcademicPS_Psych_F1_)
model <- aov(`Math` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
results <-aov(`Math Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
summary(results)
anova(results)%>% kbl %>% kable_material_dark()
anova(results)
results <-aov(`Gender Stereotype Threat SR Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
anova(results)
results <-aov(`Math Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
warnings()
View(results)
View(results)
MathANOVA <-aov(`Math Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
View(MathANOVA)
summary(MathANOVA)
MathANOVA <-aov(`Math Score` ~ Race + Gender + `Condition Assignment`+ Race:Gender + Race:'Condition Assignment' + Gender:'Condition Assignment'+ Gender:Race:'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOVA <-aov(`Math Score` ~ Race + Gender + `Condition Assignment`+ Race:Gender + Race*'Condition Assignment' + Gender*'Condition Assignment'+ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOVA <-aov(`Math Score` ~ Race * Gender * `Condition Assignment`, data = AcademicPS_Psych_F1_)
Summary(MathANOVA)
summary.aov(MathANOVA)
MathANOVA1 <- aov('Math Score' ~ Race * Gender * 'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOV <- anova_test('Math Score' ~ Gender*Race*'Condition Assignment', data=AcademicPS_Psych_F1)
MathANOV <- aov('Math Score' ~ Gender*Race*'Condition Assignment', data=AcademicPS_Psych_F1)
MathANOV <-aov('Math Score' ~ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
## Install and load packages
if (!require(car)) {install.packages("car"); require(car)}
if (!require(pwr)) {install.packages("pwr"); require(pwr)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(corrplot)) {install.packages("corrplot"); require(corrplot)}
if (!require(lm.beta)) {install.packages("lm.beta"); require(lm.beta)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(effects)) {install.packages("effects"); require(effects)}
## load data into R
all.data <- read.csv("alldata.kidlearning1.csv") ## all.data is what we are calling it
all.data<-read_xlsx(AcademicPS_Psych_F1_)
all.data <- read_xlsx('AcademicPS_Psych_F1_')
all.data <- read_xlsx("AcademicPS_Psych_F1_")
anova.aov <- lm('Math Score' ~ Race*Gender*'Condition Assignment', data=AcademicPS_Psych_F1_)
anova.aov <- lm('Math Score' ~ Race*Gender*'Condition Assignment',data = AcademicPS_Psych_F1_)
anova.aov <- lm(Math Score ~ Race*Gender*Condition Assignment,data = AcademicPS_Psych_F1_)
anova.aov <- lm('Math Score' ~ Race*Gender*Condition Assignment,data = AcademicPS_Psych_F1_)
anova.aov <- aov(Math Score ~ Race*Gender*'Condition Assignment',data = AcademicPS_Psych_F1_)
anova.aov<-aov(Math Score ~ Race*Gender*'Condition Assignment',data = AcademicPS_Psych_F1_)
str(AcademicPS_Psych_F1_)
ggplot(AcademicPS_Psych_F1_,x='Condition Assignment', y='Math Score', color='gender',palette('red','black'),facet.by='race')
ggplot2:(AcademicPS_Psych_F1_,x='Condition Assignment', y='Math Score', color='gender',palette('red','black'),facet.by='race')
ggboxplot (AcademicPS_Psych_F1_, x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender")
ggplot2:(AcademicPS_Psych_F1_, x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender")
(AcademicPS_Psych_F1_ x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender")
ggplot2: AcademicPS_Psych_F1_, x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender"
ggplot2: AcademicPS_Psych_F1_ x = "Condition Assignment", y = "Math Score",  color = "Race", palette = c("red", "black"), facet.by = "Gender"
model <- aov(Math Score ~ Race * Gender * Condition Assignment, data= AcademicPS_Psych_F1_)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
Summary(AcademicPS_Psych_F1_$`Math Score`)
summary(AcademicPS_Psych_F1_$`Math Score`)
summary(AcademicPS_Psych_F1_$Race)
summary(AcademicPS_Psych_F1_$`Condition Assignment`)
summary(AcademicPS_Psych_F1_$Gender)
MathANOVA <- aov('Math Score' ~ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOVA <- aov('Math Score' ~ Gender*Race*'Condition Assignment', data = 'AcademicPS_Psych_F1_')
MathANOVA = aov('Math Score' ~ Gender*Race*'Condition Assignment', data = AcademicPS_Psych_F1_)
MathANOVA <- aov('Math Score' ~ Gender + Race + 'Condition Assignment', data = AcademicPS_Psych_F1_)
two.way <- aov('Math Score' ~ Gender, data=AcademicPS_Psych_F1_)
two.way <- aov(Math Score ~ Gender, data=AcademicPS_Psych_F1_)
two.way<-aov(Math Score ~ Gender, data=AcademicPS_Psych_F1_)
two <- aov(Math Score ~ Gender, data=AcademicPS_Psych_F1_)
two <_ aov(Math Score ~ Gender, data=AcademicPS_Psych_F1_)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
library(readxl)
all_data <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(all_data)
anova.ms <- aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
anova.ms <- aov (Math Score ~ Gender*Race*Condition Assignment, data = all_data)
anova.ms <- lm(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
anova.ms <- aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
ams <- aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
ams<-aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
aov(Math Score ~ Gender*Race*Condition Assignment, data = all_data)
ams<-aov('Math Score' ~ Gender*Race*Condition Assignment, data = all_data)
ams<-aov(Math Score ~ Gender*Race*'Condition Assignment', data = all_data)
ams<-aov('Math Score' ~ Gender*Race*'Condition Assignment', data = all_data)
ams<-aov('Math Score' ~ Gender*Race*'Condition Assignment', data = all_data)
interaction <- aov(`Math Score` ~ Gender + Race + Gender*Race + Gender:'Condition Assignment'+`Race:'Condition Assignment' + Condition Assignment` + Gender:Race:'Condition Assignment', data = AcademicPS_Psych_F1_)
library(readxl)
AcademicPS_Psych_F1_ <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(AcademicPS_Psych_F1_)
library(readxl)
PFD <- read_excel("Downloads/untitled folder/AcademicPS-Psych(F1).xlsx")
View(PFD)
msanova <- aov('Math Score' ~ Gender*Race*Condition Assignment, data = PFD)
msanova <- aov(`Gender Stereotype Threat SR Score` ~ Gender +`Condition Assignment`, data = PFD)
summary(msanova)
msanova <- aov(`Math Score` ~ Gender*`Condition Assignment`*Race, data = PFD)
summary(msanova)
rsanova<- aov(`Gender Stereotype Threat SR Score` ~ Gender*`Condition Assignment`*Race, data = PFD)
summary(rsanova)
gsanova<- aov(`Racial Stereotype Threat SR Score` ~ Gender*`Condition Assignment`*Race, data = PFD)
gsanova<- aov(`Race Stereotype Threat SR Score` ~ Gender*`Condition Assignment`*Race, data = PFD)
summary(gsanova)
rginteraction<- aov(`Math Score` ~ Gender*Race, data = PFD)
summary(rginteraction)
TukeyHSD(rginteraction)
rsanova<- aov(`Gender Stereotype Threat SR Score` ~ Gender*, data = PFD)
gmaineffect<- aov(`Gender Stereotype Threat SR Score` ~ Gender, data = PFD)
summary(gmaineffect)
TukeyHSD(gmaineffect)
rmaineffect<- aov(`Race Stereotype Threat SR Score` ~ Race, data = PFD)
summary(rmaineffect)
TukeyHSD(rmaineffect)
summary(PFD)
summary(PFD)
#### Data Cleaning and Analysis
#### Load Packages & Set Working Directory ------
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
library(ggplot2)
setwd("~/Desktop/psy1903/stats/final_stats")
#### D-score Function --------------------------------
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
#### Data Cleaning and Analysis
#### Load Packages & Set Working Directory ------
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
library(ggplot2)
setwd("~/Desktop/psy1903/stats/final_stats")
#### D-score Function --------------------------------
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
#### Data Cleaning and Analysis
#### Load Packages & Set Working Directory ------
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
library(ggplot2)
setwd("~/Desktop/psy1903/stats/final_stats")
#### D-score Function --------------------------------
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
library(ggplot2)
setwd("~/Desktop/psy1903/stats/final_stats")
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
#### Load Packages & Set Working Directory ------
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse","rstudioapi","lme4","emmeans","psych","corrplot","jsonlite")
library(ggplot2)
setwd("~/Desktop/psy1903/stats/final_stats")
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
colnames(dScores) <- c("participant_ID", "d_score")
calculate_IAT_dscore <- function(data) {
tmp <- data[data$rt > 300 & data$rt < 5000 & data$correct == TRUE,]
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "healthy or fit" |
tmp$expectedCategoryAsDisplayed == "unhealthy or fat",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "unhealthy or fit" |
tmp$expectedCategoryAsDisplayed == "healthy or fat",]
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_means <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
dscore <- (incongruent_means - congruent_means)/pooled_sd
return(dscore)
}
#### Questionnaire Scoring Function ---------------
score_questionnaire <- function (q_data) {
pulled_data <- q_data[q_data$trialType == "questionnairePartA", "response"]
questionnaire <- fromJSON(pulled_data)
questionnaire <- as.data.frame(questionnaire)
questionnaire <- as.data.frame(lapply(questionnaire, as.numeric))
rev_items <- c("Q0","Q4","Q5","Q9")
for (rev_item in rev_items) {
questionnaire[, rev_item] <- 4 - questionnaire[, rev_item]
}
score <- rowMeans(questionnaire, na.rm = TRUE)
return(score)
}
#### For Loop ------------------------------------------
i = 1
file <-files_list[[1]]
for (file in files_list) {
tmp <- read.csv(file)
tmp[tmp == ""] <- NA
participant_ID <- tools::file_path_sans_ext(basename(file))
tmp$rt <- as.numeric(tmp$rt)
tmp$correct <- as.logical(tmp$correct)
tmp$expectedCategory <- as.factor(tmp$expectedCategory)
tmp$expectedCategoryAsDisplayed <- as.factor(tmp$expectedCategoryAsDisplayed)
tmp$leftCategory <- as.factor(tmp$leftCategory)
tmp$rightCategory <- as.factor(tmp$rightCategory)
dScores[i,"participant_ID"] <- participant_ID
dScores[i,"d_score"] <- calculate_IAT_dscore(tmp)
dScores[i,"whichPrime"] <- tmp$displayedVideo[tmp$trialType == "prime" & tmp$displayedVideo != " "]
dScores[i,"questionnaire"] <- score_questionnaire(tmp)
rm(tmp)
i <- i + 1
}
dScores$whichPrime <- as.factor(dScores$whichPrime)
write.csv(dScores,"~/Desktop/psy1903/stats/data_cleaning/data/participant_dScores.csv", row.names = FALSE)
#### ANOVA -------------------------------------------
av_model <- aov(d_score ~ whichPrime, data = dScores)
summary(av_model)
#### T-Test ---------------------------------------------
TukeyHSD(av_model)
#### Correlation ---------------------------------------
cor.test(dScores$d_score,
log10(dScores$questionnaire))
#### Base R Histogram -------------------------------
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig1_baseR_histogram.png", width = 600, height = 500)
hist_dscore <- dScores$d_score
hist(hist_dscore,
main = "Distribution of D-Scores",
xlab = "D-Scores",
ylab = "Frequency")
dev.off()
#### ggplot Histogram --------------------------------
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig2_ggplot_histogram.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = d_score)) +
geom_histogram(binwidth = 0.15, fill = "skyblue", color = "black") +
labs(title = "Distribution of D-Scores",
x = "D-Scores",
y = "Frequency") + theme_minimal()
dev.off()
#### ggplot Histogram by Prime ---------------------
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig3_ggplot_histogram_by_prime.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = d_score)) +
geom_histogram(binwidth = 0.15, fill = "skyblue", color = "black") +
labs(title = "Distribution of D-Scores",
x = "D-Scores",
y = "Frequency") + theme_classic() +facet_wrap(~whichPrime)
dev.off()
#### ggplot Box Plot ----------------------------------
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig4_ggplot_boxplot.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = whichPrime, y=d_score, fill=whichPrime)) +
geom_boxplot() +
labs(title = "Effect of Prime on D-Scores",
x = "Prime Condition",
y = "D-Scores") +
theme_classic() +
theme(legend.position = "none") +
scale_x_discrete(labels = c("video1" = "Healthy-Fit Prime",
"video2" = "Unhealthy-Fat Prime"))
dev.off()
#### ggplot Scatter Plot -------------------------------
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig5_ggplot_scatter.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = questionnaire, y=d_score)) +
geom_point() +
geom_smooth(method ="lm") +
labs(title = "Correlation Between Questionnaire and D-Scores",
x = "Questionnaire",
y = "D-Scores") +
theme_classic()
dev.off()
theme_minimal(base_size = base_size,
base_family = base_family,
base_line_size = base_line_size) %+replace%
theme(
axis.title.y = element_text(angle = 0, vjust = 0, hjust = 0.5, size = 14, color = "lightpink"),
axis.title.x = element_text(hjust = 0.5, size = 14, color = "salmon"),
axis.text = element_text(size = 14, color = "magenta"),
axis.ticks = element_line(color = "black"),
plot.title = element_text(hjust = 0.5, size = 30, color = "maroon"),
complete = TRUE
)
#### ggplot Custom Theme ---------------------------
theme_kayla <- function (base_size = 14,
base_family = "",
base_line_size = base_size/170,
base_rect_size = base_size/170){
theme_minimal(base_size = base_size,
base_family = base_family,
base_line_size = base_line_size) %+replace%
theme(
axis.title.y = element_text(angle = 0, vjust = 0, hjust = 0.5, size = 14, color = "lightpink"),
axis.title.x = element_text(hjust = 0.5, size = 14, color = "salmon"),
axis.text = element_text(size = 14, color = "magenta"),
axis.ticks = element_line(color = "black"),
plot.title = element_text(hjust = 0.5, size = 30, color = "maroon"),
complete = TRUE
)
}
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig6_custom_theme.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = whichPrime, y=d_score, fill=whichPrime)) +
geom_boxplot() +
labs(title = "Effect of Prime on D-Scores",
x = "Prime Condition",
y = "D-Scores") +
theme_kayla() +
theme(legend.position = "none") +
scale_x_discrete(labels = c("video1" = "Healthy-Fit Prime",
"video2" = "Unhealthy-Fat Prime"))
dev.off()
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig7_custom_theme.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = questionnaire, y=d_score)) +
geom_point() +
geom_smooth(method ="lm") +
labs(title = "Correlation Between Questionnaire and D-Scores",
x = "Questionnaire",
y = "D-Scores") +
theme_kayla()
dev.off()
# Correlation
cor.test(dScores$d_score,
(dScores$questionnaire))
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig5_ggplot_scatter.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = questionnaire, y=d_score)) +
geom_point() +
geom_smooth(method ="lm") +
labs(title = "Correlation Between Questionnaire and D-Scores",
x = "Questionnaire",
y = "D-Scores") +
theme_classic()
dev.off()
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig5_ggplot_scatter.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = questionnaire, y=d_score)) +
geom_point() +
geom_smooth(method ="lm") +
labs(title = "Correlation Between Questionnaire and D-Scores",
x = "Questionnaire",
y = "D-Scores") +
theme_classic()
dev.off()
theme_kayla <- function (base_size = 14,
base_family = "",
base_line_size = base_size/170,
base_rect_size = base_size/170){
theme_minimal(base_size = base_size,
base_family = base_family,
base_line_size = base_line_size) %+replace%
theme(
axis.title.y = element_text(angle = 0, vjust = 0, hjust = 0.5, size = 14, color = "lightpink"),
axis.title.x = element_text(hjust = 0.5, size = 14, color = "salmon"),
axis.text = element_text(size = 14, color = "magenta"),
axis.ticks = element_line(color = "black"),
plot.title = element_text(hjust = 0.5, size = 30, color = "maroon"),
complete = TRUE
)
}
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig6_custom_theme.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = whichPrime, y=d_score, fill=whichPrime)) +
geom_boxplot() +
labs(title = "Effect of Prime on D-Scores",
x = "Prime Condition",
y = "D-Scores") +
theme_kayla() +
theme(legend.position = "none") +
scale_x_discrete(labels = c("video1" = "Healthy-Fit Prime",
"video2" = "Unhealthy-Fat Prime"))
dev.off()
png("~/Desktop/psy1903/stats/data_cleaning/output/Fig7_custom_theme.png", width = 600, height = 500)
ggplot(data=dScores, aes (x = questionnaire, y=d_score)) +
geom_point() +
geom_smooth(method ="lm") +
labs(title = "Correlation Between Questionnaire and D-Scores",
x = "Questionnaire",
y = "D-Scores") +
theme_kayla()
dev.off()
